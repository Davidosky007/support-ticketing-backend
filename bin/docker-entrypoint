#!/bin/bash
set -e

# Create necessary directories
mkdir -p /rails/tmp/pids /rails/tmp/csv_exports /rails/log
chmod -R 777 /rails/tmp /rails/log

# Remove a potentially pre-existing server.pid for Rails
rm -f /rails/tmp/pids/server.pid

# Check if DATABASE_URL is provided - skips DB checks if not available
if [ -n "$DATABASE_URL" ]; then
  echo "Using DATABASE_URL from environment"
  export DATABASE_URL="$DATABASE_URL"
  
  # Try connecting to PostgreSQL but with timeout
  ATTEMPTS=0
  MAX_ATTEMPTS=5
  
  until pg_isready -d "$DATABASE_URL" || [ $ATTEMPTS -eq $MAX_ATTEMPTS ]; do
    echo >&2 "Waiting for PostgreSQL to become available (attempt $((ATTEMPTS+1))/$MAX_ATTEMPTS)..."
    ATTEMPTS=$((ATTEMPTS+1))
    sleep 3
  done
  
  if [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; then
    echo >&2 "PostgreSQL is ready!"
    # Setup database
    echo "Running database migrations..."
    bundle exec rails db:migrate
  else
    echo >&2 "WARNING: PostgreSQL not available after $MAX_ATTEMPTS attempts. Starting app anyway."
  fi
# Check if we have individual DB connection params
elif [ -n "$DB_HOST" ] && [ -n "$DB_PORT" ] && [ -n "$DB_USERNAME" ]; then
  echo "Using individual connection parameters"
  
  # Try connecting to PostgreSQL but with timeout
  ATTEMPTS=0
  MAX_ATTEMPTS=5
  
  until pg_isready -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USERNAME" || [ $ATTEMPTS -eq $MAX_ATTEMPTS ]; do
    echo >&2 "Waiting for PostgreSQL to become available (attempt $((ATTEMPTS+1))/$MAX_ATTEMPTS)..."
    ATTEMPTS=$((ATTEMPTS+1))
    sleep 3
  done
  
  if [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; then
    echo >&2 "PostgreSQL is ready!"
    # Setup database
    echo "Running database migrations..."
    bundle exec rails db:migrate
  else
    echo >&2 "WARNING: PostgreSQL not available after $MAX_ATTEMPTS attempts. Starting app anyway."
  fi
else
  echo "WARNING: No database connection information provided. Skipping database setup."
  echo "The application will start but may not function correctly without a database."
fi

# Then exec the container's main process
exec "$@"
