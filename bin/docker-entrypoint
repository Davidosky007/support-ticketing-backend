#!/bin/bash
set -e

# Wait for PostgreSQL to be available - Fix the pg_isready command
function postgres_ready() {
  # Debug: Print environment variables to help diagnose the issue
  echo "Database connection settings:"
  echo "DB_HOST=$DB_HOST"
  echo "DB_PORT=$DB_PORT" 
  echo "DB_USERNAME=$DB_USERNAME (length: ${#DB_USERNAME})"
  
  # Fixed check for empty username - only use -U if username is not empty string
  if [ -n "$DB_USERNAME" ] && [ "$DB_USERNAME" != "" ]; then
    echo "Using username for pg_isready: $DB_USERNAME"
    pg_isready -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USERNAME"
  else
    echo "No username provided, connecting without -U flag"
    pg_isready -h "$DB_HOST" -p "$DB_PORT"
  fi
}

until postgres_ready; do
  echo >&2 "Waiting for PostgreSQL to become available..."
  sleep 2
done
echo >&2 "PostgreSQL is ready!"

# Remove a potentially pre-existing server.pid for Rails
rm -f /rails/tmp/pids/server.pid

# Create the database if it doesn't exist
if bundle exec rails db:exists; then
  echo "Database exists, running migrations..."
else
  echo "Database doesn't exist, creating and seeding..."
  bundle exec rails db:prepare
fi

# Run pending migrations
bundle exec rails db:migrate

# Then exec the container's main process (what's set as CMD in the Dockerfile)
exec "$@"
